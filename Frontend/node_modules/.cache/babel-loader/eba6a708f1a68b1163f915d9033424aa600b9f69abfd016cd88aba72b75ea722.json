{"ast":null,"code":"var _jsxFileName = \"D:\\\\PG-DAC\\\\Sparkle-With-Us\\\\frontend\\\\src\\\\components\\\\Booking.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from 'react';\n// import axios from 'axios';\n\n// const Booking = () => {\n//     const [selectedTimeSlot, setSelectedTimeSlot] = useState('');\n//     const [timeSlots, setTimeSlots] = useState([]);\n//     const [serviceId, setServiceId] = useState('');\n//     const [startDateTime, setStartDateTime] = useState('');\n//     const [endDateTime, setEndDateTime] = useState('');\n//     const [customerName, setCustomerName] = useState('');\n//     const [bookingDateTime, setBookingDateTime] = useState('');\n//     const [message, setMessage] = useState('');\n\n//     // Format date-time for the backend\n//     const formatDateTimeForBackend = (dateTime) => {\n//         if (!dateTime) return '';\n//         return dateTime.replace('T', 'T') + \":00\"; // Add seconds if needed\n//     };\n\n//     // Fetch available time slots\n//     const fetchTimeSlots = () => {\n//         const formattedStartDateTime = formatDateTimeForBackend(startDateTime);\n//         const formattedEndDateTime = formatDateTimeForBackend(endDateTime);\n\n//         axios.get('http://localhost:8080/timeslots/available', {\n//             params: { serviceId, startDateTime: formattedStartDateTime, endDateTime: formattedEndDateTime }\n//         })\n//         .then(response => {\n//             setTimeSlots(response.data);\n//             if (response.data.length === 0) {\n//                 setMessage('No time slots available for the selected time range.');\n//             } else {\n//                 setMessage('');\n//             }\n//         })\n//         .catch(error => {\n//             if (error.response) {\n//                 setMessage(`Error fetching time slots: ${error.response.data}`);\n//             } else {\n//                 setMessage('Error fetching time slots. Please try again.');\n//             }\n//         });\n//     };\n\n//     // Handle booking\n//     const handleBooking = () => {\n//         if (!serviceId || !startDateTime || !customerName || !selectedTimeSlot || !bookingDateTime) {\n//             setMessage('Please select a service, enter your name, select a time slot, and booking date-time.');\n//             return;\n//         }\n\n//         const confirmBooking = window.confirm(`Do you want to confirm this booking for ${customerName}?`);\n//         if (!confirmBooking) {\n//             setMessage('Booking canceled.');\n//             return;\n//         }\n\n//         const formattedBookingDateTime = formatDateTimeForBackend(bookingDateTime);\n\n//         const bookingData = {\n//             serviceId,\n//             timeSlot: selectedTimeSlot,\n//             customerName,\n//             bookingDateTime: formattedBookingDateTime,\n//         };\n\n//         axios.post('http://localhost:8080/booking', bookingData)\n//             .then(response => {\n//                 setMessage(`Booking confirmed!\\nService ID: ${serviceId}\\nTime Slot: ${selectedTimeSlot}\\nCustomer Name: ${customerName}\\nBooking Date-Time: ${formattedBookingDateTime}`);\n//                 setServiceId('');\n//                 setStartDateTime('');\n//                 setEndDateTime('');\n//                 setTimeSlots([]);\n//                 setSelectedTimeSlot('');\n//                 setCustomerName('');\n//                 setBookingDateTime('');\n//             })\n//             .catch(error => {\n//                 if (error.response) {\n//                     setMessage(`Error creating booking: ${error.response.data}`);\n//                 } else {\n//                     setMessage('Error creating booking. Please try again.');\n//                 }\n//             });\n//     };\n\n//     return (\n//         <div>\n//             <h1>Book a Service</h1>\n\n//             <div>\n//                 <label htmlFor=\"serviceId\">Service ID:</label>\n//                 <input\n//                     type=\"text\"\n//                     id=\"serviceId\"\n//                     value={serviceId}\n//                     onChange={(e) => setServiceId(e.target.value)}\n//                 />\n//             </div>\n\n//             <div>\n//                 <label htmlFor=\"startDateTime\">Start DateTime:</label>\n//                 <input\n//                     type=\"datetime-local\"\n//                     id=\"startDateTime\"\n//                     value={startDateTime}\n//                     onChange={(e) => setStartDateTime(e.target.value)}\n//                 />\n//             </div>\n\n//             <div>\n//                 <label htmlFor=\"endDateTime\">End DateTime:</label>\n//                 <input\n//                     type=\"datetime-local\"\n//                     id=\"endDateTime\"\n//                     value={endDateTime}\n//                     onChange={(e) => setEndDateTime(e.target.value)}\n//                 />\n//             </div>\n\n//             <div>\n//                 <label htmlFor=\"customerName\">Your Name:</label>\n//                 <input\n//                     type=\"text\"\n//                     id=\"customerName\"\n//                     placeholder=\"Your Name\"\n//                     value={customerName}\n//                     onChange={(e) => setCustomerName(e.target.value)}\n//                 />\n//             </div>\n\n//             <div>\n//                 <label htmlFor=\"bookingDateTime\">Booking Date-Time:</label>\n//                 <input\n//                     type=\"datetime-local\"\n//                     id=\"bookingDateTime\"\n//                     value={bookingDateTime}\n//                     onChange={(e) => setBookingDateTime(e.target.value)}\n//                 />\n//             </div>\n\n//             <button onClick={fetchTimeSlots}>Fetch Available Time Slots</button>\n\n//             {message && <p className=\"message\">{message}</p>}\n\n//             {timeSlots.length > 0 ? (\n//                 <div>\n//                     <h3>Available Time Slots</h3>\n//                     <ul>\n//                         {timeSlots.map(slot => (\n//                             <li key={slot.id}>\n//                                 <button\n//                                     onClick={() => setSelectedTimeSlot(slot.id)}\n//                                     className={selectedTimeSlot === slot.id ? 'selected-slot' : ''}\n//                                 >\n//                                     {slot.startDateTime} - {slot.endDateTime}\n//                                 </button>\n//                             </li>\n//                         ))}\n//                     </ul>\n//                 </div>\n//             ) : (\n//                 <p>No time slots available.</p> // Display \"Not Available\" message\n//             )}\n\n//             <button onClick={handleBooking}>Book Now</button>\n//         </div>\n//     );\n// };\n\n// export default Booking;\n\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport './css/Booking.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Booking = () => {\n  _s();\n  const [selectedTimeSlot, setSelectedTimeSlot] = useState('');\n  const [timeSlots, setTimeSlots] = useState([]);\n  const [serviceId, setServiceId] = useState('');\n  const [startDateTime, setStartDateTime] = useState('');\n  const [endDateTime, setEndDateTime] = useState('');\n  const [customerName, setCustomerName] = useState('');\n  const [bookingDateTime, setBookingDateTime] = useState('');\n\n  // Format date-time for the backend\n  const formatDateTimeForBackend = dateTime => {\n    if (!dateTime) return '';\n    return dateTime.replace('T', 'T') + \":00\"; // Add seconds if needed\n  };\n\n  // Fetch available time slots\n  const fetchTimeSlots = () => {\n    const formattedStartDateTime = formatDateTimeForBackend(startDateTime);\n    const formattedEndDateTime = formatDateTimeForBackend(endDateTime);\n    axios.get('http://localhost:8080/timeslots/available', {\n      params: {\n        serviceId,\n        startDateTime: formattedStartDateTime,\n        endDateTime: formattedEndDateTime\n      }\n    }).then(response => {\n      setTimeSlots(response.data);\n      if (response.data.length === 0) {\n        alert('No time slots available for the selected time range.');\n      } else {\n        alert('Time slots are available!');\n      }\n    }).catch(error => {\n      if (error.response) {\n        alert(`Error fetching time slots: ${error.response.data}`);\n      } else {\n        alert('Error fetching time slots. Please try again.');\n      }\n    });\n  };\n\n  // Handle booking\n  const handleBooking = () => {\n    console.log(bookingDateTime);\n    if (!serviceId || !startDateTime || !customerName || !selectedTimeSlot || !bookingDateTime) {\n      alert('Please select a service, enter your name, select a time slot, and booking date-time.');\n      return;\n    }\n    const confirmBooking = window.confirm(`Do you want to confirm this booking for ${customerName}?`);\n    if (!confirmBooking) {\n      alert('Booking canceled.');\n      return;\n    }\n    const formattedBookingDateTime = formatDateTimeForBackend(bookingDateTime);\n    const bookingData = {\n      serviceId,\n      timeslotId: selectedTimeSlot,\n      customerId: customerName,\n      bookingDateTime: formattedBookingDateTime\n    };\n    axios.post('http://localhost:8080/booking', bookingData).then(response => {\n      alert(`Booking confirmed!\\nService ID: ${serviceId}\\nTime Slot: ${selectedTimeSlot}\\nCustomer Name: ${customerName}\\nBooking Date-Time: ${formattedBookingDateTime}`);\n      setServiceId('');\n      setStartDateTime('');\n      setEndDateTime('');\n      setTimeSlots([]);\n      setSelectedTimeSlot('');\n      setCustomerName('');\n      setBookingDateTime('');\n    }).catch(error => {\n      if (error.response) {\n        alert(`Error creating booking: ${error.response.data}`);\n      } else {\n        alert('Error creating booking. Please try again.');\n      }\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Book a Service\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"booking\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"serviceId\",\n          children: \"Service ID:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"serviceId\",\n          value: serviceId,\n          onChange: e => setServiceId(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"startDateTime\",\n          children: \"Start DateTime:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"datetime-local\",\n          id: \"startDateTime\",\n          value: startDateTime,\n          onChange: e => setStartDateTime(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"endDateTime\",\n          children: \"End DateTime:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 287,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"datetime-local\",\n          id: \"endDateTime\",\n          value: endDateTime,\n          onChange: e => setEndDateTime(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"customerName\",\n          children: \"Your Name:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"customerName\",\n          placeholder: \"Customer Id\",\n          value: customerName,\n          onChange: e => setCustomerName(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 298,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"bookingDateTime\",\n          children: \"Booking Date-Time:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 308,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"datetime-local\",\n          id: \"bookingDateTime\",\n          value: bookingDateTime,\n          onChange: e => setBookingDateTime(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: fetchTimeSlots,\n        children: \"Fetch Available Time Slots\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 13\n      }, this), timeSlots.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Available Time Slots\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 321,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: timeSlots.map(slot => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => setSelectedTimeSlot(slot.id),\n              className: selectedTimeSlot === slot.id ? 'selected-slot' : '',\n              children: [slot.startDateTime, \" - \", slot.endDateTime]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 325,\n              columnNumber: 33\n            }, this)\n          }, slot.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 324,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 322,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleBooking,\n        children: \"Book Now\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 337,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 263,\n    columnNumber: 9\n  }, this);\n};\n_s(Booking, \"jxs4vW/SmXmrJJxWLvJTJIN8ZaY=\");\n_c = Booking;\nexport default Booking;\nvar _c;\n$RefreshReg$(_c, \"Booking\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","Booking","_s","selectedTimeSlot","setSelectedTimeSlot","timeSlots","setTimeSlots","serviceId","setServiceId","startDateTime","setStartDateTime","endDateTime","setEndDateTime","customerName","setCustomerName","bookingDateTime","setBookingDateTime","formatDateTimeForBackend","dateTime","replace","fetchTimeSlots","formattedStartDateTime","formattedEndDateTime","get","params","then","response","data","length","alert","catch","error","handleBooking","console","log","confirmBooking","window","confirm","formattedBookingDateTime","bookingData","timeslotId","customerId","post","children","fileName","_jsxFileName","lineNumber","columnNumber","className","htmlFor","type","id","value","onChange","e","target","placeholder","onClick","map","slot","_c","$RefreshReg$"],"sources":["D:/PG-DAC/Sparkle-With-Us/frontend/src/components/Booking.js"],"sourcesContent":["\r\n// import React, { useState } from 'react';\r\n// import axios from 'axios';\r\n\r\n// const Booking = () => {\r\n//     const [selectedTimeSlot, setSelectedTimeSlot] = useState('');\r\n//     const [timeSlots, setTimeSlots] = useState([]);\r\n//     const [serviceId, setServiceId] = useState('');\r\n//     const [startDateTime, setStartDateTime] = useState('');\r\n//     const [endDateTime, setEndDateTime] = useState('');\r\n//     const [customerName, setCustomerName] = useState('');\r\n//     const [bookingDateTime, setBookingDateTime] = useState('');\r\n//     const [message, setMessage] = useState('');\r\n\r\n//     // Format date-time for the backend\r\n//     const formatDateTimeForBackend = (dateTime) => {\r\n//         if (!dateTime) return '';\r\n//         return dateTime.replace('T', 'T') + \":00\"; // Add seconds if needed\r\n//     };\r\n\r\n//     // Fetch available time slots\r\n//     const fetchTimeSlots = () => {\r\n//         const formattedStartDateTime = formatDateTimeForBackend(startDateTime);\r\n//         const formattedEndDateTime = formatDateTimeForBackend(endDateTime);\r\n\r\n//         axios.get('http://localhost:8080/timeslots/available', {\r\n//             params: { serviceId, startDateTime: formattedStartDateTime, endDateTime: formattedEndDateTime }\r\n//         })\r\n//         .then(response => {\r\n//             setTimeSlots(response.data);\r\n//             if (response.data.length === 0) {\r\n//                 setMessage('No time slots available for the selected time range.');\r\n//             } else {\r\n//                 setMessage('');\r\n//             }\r\n//         })\r\n//         .catch(error => {\r\n//             if (error.response) {\r\n//                 setMessage(`Error fetching time slots: ${error.response.data}`);\r\n//             } else {\r\n//                 setMessage('Error fetching time slots. Please try again.');\r\n//             }\r\n//         });\r\n//     };\r\n\r\n//     // Handle booking\r\n//     const handleBooking = () => {\r\n//         if (!serviceId || !startDateTime || !customerName || !selectedTimeSlot || !bookingDateTime) {\r\n//             setMessage('Please select a service, enter your name, select a time slot, and booking date-time.');\r\n//             return;\r\n//         }\r\n\r\n//         const confirmBooking = window.confirm(`Do you want to confirm this booking for ${customerName}?`);\r\n//         if (!confirmBooking) {\r\n//             setMessage('Booking canceled.');\r\n//             return;\r\n//         }\r\n\r\n//         const formattedBookingDateTime = formatDateTimeForBackend(bookingDateTime);\r\n\r\n//         const bookingData = {\r\n//             serviceId,\r\n//             timeSlot: selectedTimeSlot,\r\n//             customerName,\r\n//             bookingDateTime: formattedBookingDateTime,\r\n//         };\r\n\r\n//         axios.post('http://localhost:8080/booking', bookingData)\r\n//             .then(response => {\r\n//                 setMessage(`Booking confirmed!\\nService ID: ${serviceId}\\nTime Slot: ${selectedTimeSlot}\\nCustomer Name: ${customerName}\\nBooking Date-Time: ${formattedBookingDateTime}`);\r\n//                 setServiceId('');\r\n//                 setStartDateTime('');\r\n//                 setEndDateTime('');\r\n//                 setTimeSlots([]);\r\n//                 setSelectedTimeSlot('');\r\n//                 setCustomerName('');\r\n//                 setBookingDateTime('');\r\n//             })\r\n//             .catch(error => {\r\n//                 if (error.response) {\r\n//                     setMessage(`Error creating booking: ${error.response.data}`);\r\n//                 } else {\r\n//                     setMessage('Error creating booking. Please try again.');\r\n//                 }\r\n//             });\r\n//     };\r\n\r\n//     return (\r\n//         <div>\r\n//             <h1>Book a Service</h1>\r\n\r\n//             <div>\r\n//                 <label htmlFor=\"serviceId\">Service ID:</label>\r\n//                 <input\r\n//                     type=\"text\"\r\n//                     id=\"serviceId\"\r\n//                     value={serviceId}\r\n//                     onChange={(e) => setServiceId(e.target.value)}\r\n//                 />\r\n//             </div>\r\n\r\n//             <div>\r\n//                 <label htmlFor=\"startDateTime\">Start DateTime:</label>\r\n//                 <input\r\n//                     type=\"datetime-local\"\r\n//                     id=\"startDateTime\"\r\n//                     value={startDateTime}\r\n//                     onChange={(e) => setStartDateTime(e.target.value)}\r\n//                 />\r\n//             </div>\r\n\r\n//             <div>\r\n//                 <label htmlFor=\"endDateTime\">End DateTime:</label>\r\n//                 <input\r\n//                     type=\"datetime-local\"\r\n//                     id=\"endDateTime\"\r\n//                     value={endDateTime}\r\n//                     onChange={(e) => setEndDateTime(e.target.value)}\r\n//                 />\r\n//             </div>\r\n\r\n//             <div>\r\n//                 <label htmlFor=\"customerName\">Your Name:</label>\r\n//                 <input\r\n//                     type=\"text\"\r\n//                     id=\"customerName\"\r\n//                     placeholder=\"Your Name\"\r\n//                     value={customerName}\r\n//                     onChange={(e) => setCustomerName(e.target.value)}\r\n//                 />\r\n//             </div>\r\n\r\n//             <div>\r\n//                 <label htmlFor=\"bookingDateTime\">Booking Date-Time:</label>\r\n//                 <input\r\n//                     type=\"datetime-local\"\r\n//                     id=\"bookingDateTime\"\r\n//                     value={bookingDateTime}\r\n//                     onChange={(e) => setBookingDateTime(e.target.value)}\r\n//                 />\r\n//             </div>\r\n\r\n//             <button onClick={fetchTimeSlots}>Fetch Available Time Slots</button>\r\n\r\n//             {message && <p className=\"message\">{message}</p>}\r\n\r\n//             {timeSlots.length > 0 ? (\r\n//                 <div>\r\n//                     <h3>Available Time Slots</h3>\r\n//                     <ul>\r\n//                         {timeSlots.map(slot => (\r\n//                             <li key={slot.id}>\r\n//                                 <button\r\n//                                     onClick={() => setSelectedTimeSlot(slot.id)}\r\n//                                     className={selectedTimeSlot === slot.id ? 'selected-slot' : ''}\r\n//                                 >\r\n//                                     {slot.startDateTime} - {slot.endDateTime}\r\n//                                 </button>\r\n//                             </li>\r\n//                         ))}\r\n//                     </ul>\r\n//                 </div>\r\n//             ) : (\r\n//                 <p>No time slots available.</p> // Display \"Not Available\" message\r\n//             )}\r\n\r\n//             <button onClick={handleBooking}>Book Now</button>\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// export default Booking;\r\n\r\n\r\nimport React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport './css/Booking.css';\r\n\r\nconst Booking = () => {\r\n    const [selectedTimeSlot, setSelectedTimeSlot] = useState('');\r\n    const [timeSlots, setTimeSlots] = useState([]);\r\n    const [serviceId, setServiceId] = useState('');\r\n    const [startDateTime, setStartDateTime] = useState('');\r\n    const [endDateTime, setEndDateTime] = useState('');\r\n    const [customerName, setCustomerName] = useState('');\r\n    const [bookingDateTime, setBookingDateTime] = useState('');\r\n\r\n    // Format date-time for the backend\r\n    const formatDateTimeForBackend = (dateTime) => {\r\n        if (!dateTime) return '';\r\n        return dateTime.replace('T', 'T') + \":00\"; // Add seconds if needed\r\n    };\r\n\r\n    // Fetch available time slots\r\n    const fetchTimeSlots = () => {\r\n        const formattedStartDateTime = formatDateTimeForBackend(startDateTime);\r\n        const formattedEndDateTime = formatDateTimeForBackend(endDateTime);\r\n\r\n        axios.get('http://localhost:8080/timeslots/available', {\r\n            params: { serviceId, startDateTime: formattedStartDateTime, endDateTime: formattedEndDateTime }\r\n        })\r\n        .then(response => {\r\n            setTimeSlots(response.data);\r\n            if (response.data.length === 0) {\r\n                alert('No time slots available for the selected time range.');\r\n            } else {\r\n                alert('Time slots are available!');\r\n            }\r\n        })\r\n        .catch(error => {\r\n            if (error.response) {\r\n                alert(`Error fetching time slots: ${error.response.data}`);\r\n            } else {\r\n                alert('Error fetching time slots. Please try again.');\r\n            }\r\n        });\r\n    };\r\n\r\n    // Handle booking\r\n    const handleBooking = () => {\r\n        console.log( bookingDateTime);\r\n        if (!serviceId || !startDateTime || !customerName || !selectedTimeSlot || !bookingDateTime) {\r\n            alert('Please select a service, enter your name, select a time slot, and booking date-time.');\r\n            return;\r\n        }\r\n\r\n        const confirmBooking = window.confirm(`Do you want to confirm this booking for ${customerName}?`);\r\n        if (!confirmBooking) {\r\n            alert('Booking canceled.');\r\n            return;\r\n        }\r\n\r\n        const formattedBookingDateTime = formatDateTimeForBackend(bookingDateTime);\r\n\r\n        const bookingData = {\r\n            serviceId,\r\n            timeslotId: selectedTimeSlot,\r\n            customerId: customerName,\r\n            bookingDateTime: formattedBookingDateTime,\r\n        };\r\n\r\n        axios.post('http://localhost:8080/booking', bookingData)\r\n            .then(response => {\r\n                alert(`Booking confirmed!\\nService ID: ${serviceId}\\nTime Slot: ${selectedTimeSlot}\\nCustomer Name: ${customerName}\\nBooking Date-Time: ${formattedBookingDateTime}`);\r\n                setServiceId('');\r\n                setStartDateTime('');\r\n                setEndDateTime('');\r\n                setTimeSlots([]);\r\n                setSelectedTimeSlot('');\r\n                setCustomerName('');\r\n                setBookingDateTime('');\r\n            })\r\n            .catch(error => {\r\n                if (error.response) {\r\n                    alert(`Error creating booking: ${error.response.data}`);\r\n                } else {\r\n                    alert('Error creating booking. Please try again.');\r\n                }\r\n            });\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h1>Book a Service</h1>\r\n            <div className='booking'>\r\n            <div>\r\n                <label htmlFor=\"serviceId\">Service ID:</label>\r\n                <input\r\n                    type=\"text\"\r\n                    id=\"serviceId\"\r\n                    value={serviceId}\r\n                    onChange={(e) => setServiceId(e.target.value)}\r\n                />\r\n            </div>\r\n\r\n            <div>\r\n                <label htmlFor=\"startDateTime\">Start DateTime:</label>\r\n                <input\r\n                    type=\"datetime-local\"\r\n                    id=\"startDateTime\"\r\n                    value={startDateTime}\r\n                    onChange={(e) => setStartDateTime(e.target.value)}\r\n                />\r\n            </div>\r\n\r\n            <div>\r\n                <label htmlFor=\"endDateTime\">End DateTime:</label>\r\n                <input\r\n                    type=\"datetime-local\"\r\n                    id=\"endDateTime\"\r\n                    value={endDateTime}\r\n                    onChange={(e) => setEndDateTime(e.target.value)}\r\n                />\r\n            </div>\r\n\r\n            <div>\r\n                <label htmlFor=\"customerName\">Your Name:</label>\r\n                <input\r\n                    type=\"text\"\r\n                    id=\"customerName\"\r\n                    placeholder=\"Customer Id\"\r\n                    value={customerName}\r\n                    onChange={(e) => setCustomerName(e.target.value)}\r\n                />\r\n            </div>\r\n\r\n            <div>\r\n                <label htmlFor=\"bookingDateTime\">Booking Date-Time:</label>\r\n                <input\r\n                    type=\"datetime-local\"\r\n                    id=\"bookingDateTime\"\r\n                    value={bookingDateTime}\r\n                    onChange={(e) => setBookingDateTime(e.target.value)}\r\n                />\r\n            </div>\r\n\r\n            <button onClick={fetchTimeSlots}>Fetch Available Time Slots</button>\r\n\r\n            {timeSlots.length > 0 && (\r\n                <div>\r\n                    <h3>Available Time Slots</h3>\r\n                    <ul>\r\n                        {timeSlots.map(slot => (\r\n                            <li key={slot.id}>\r\n                                <button\r\n                                    onClick={() => setSelectedTimeSlot(slot.id)}\r\n                                    className={selectedTimeSlot === slot.id ? 'selected-slot' : ''}\r\n                                >\r\n                                    {slot.startDateTime} - {slot.endDateTime}\r\n                                </button>\r\n                            </li>\r\n                        ))}\r\n                    </ul>\r\n                </div>\r\n            )}\r\n\r\n            <button onClick={handleBooking}>Book Now</button>\r\n        </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Booking;\r\n\r\n\r\n"],"mappings":";;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAGA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAO,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3B,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClB,MAAM,CAACC,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAC5D,MAAM,CAACQ,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACU,SAAS,EAAEC,YAAY,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACY,aAAa,EAAEC,gBAAgB,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACc,WAAW,EAAEC,cAAc,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACgB,YAAY,EAAEC,eAAe,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACkB,eAAe,EAAEC,kBAAkB,CAAC,GAAGnB,QAAQ,CAAC,EAAE,CAAC;;EAE1D;EACA,MAAMoB,wBAAwB,GAAIC,QAAQ,IAAK;IAC3C,IAAI,CAACA,QAAQ,EAAE,OAAO,EAAE;IACxB,OAAOA,QAAQ,CAACC,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,KAAK,CAAC,CAAC;EAC/C,CAAC;;EAED;EACA,MAAMC,cAAc,GAAGA,CAAA,KAAM;IACzB,MAAMC,sBAAsB,GAAGJ,wBAAwB,CAACR,aAAa,CAAC;IACtE,MAAMa,oBAAoB,GAAGL,wBAAwB,CAACN,WAAW,CAAC;IAElEb,KAAK,CAACyB,GAAG,CAAC,2CAA2C,EAAE;MACnDC,MAAM,EAAE;QAAEjB,SAAS;QAAEE,aAAa,EAAEY,sBAAsB;QAAEV,WAAW,EAAEW;MAAqB;IAClG,CAAC,CAAC,CACDG,IAAI,CAACC,QAAQ,IAAI;MACdpB,YAAY,CAACoB,QAAQ,CAACC,IAAI,CAAC;MAC3B,IAAID,QAAQ,CAACC,IAAI,CAACC,MAAM,KAAK,CAAC,EAAE;QAC5BC,KAAK,CAAC,sDAAsD,CAAC;MACjE,CAAC,MAAM;QACHA,KAAK,CAAC,2BAA2B,CAAC;MACtC;IACJ,CAAC,CAAC,CACDC,KAAK,CAACC,KAAK,IAAI;MACZ,IAAIA,KAAK,CAACL,QAAQ,EAAE;QAChBG,KAAK,CAAC,8BAA8BE,KAAK,CAACL,QAAQ,CAACC,IAAI,EAAE,CAAC;MAC9D,CAAC,MAAM;QACHE,KAAK,CAAC,8CAA8C,CAAC;MACzD;IACJ,CAAC,CAAC;EACN,CAAC;;EAED;EACA,MAAMG,aAAa,GAAGA,CAAA,KAAM;IACxBC,OAAO,CAACC,GAAG,CAAEnB,eAAe,CAAC;IAC7B,IAAI,CAACR,SAAS,IAAI,CAACE,aAAa,IAAI,CAACI,YAAY,IAAI,CAACV,gBAAgB,IAAI,CAACY,eAAe,EAAE;MACxFc,KAAK,CAAC,sFAAsF,CAAC;MAC7F;IACJ;IAEA,MAAMM,cAAc,GAAGC,MAAM,CAACC,OAAO,CAAC,2CAA2CxB,YAAY,GAAG,CAAC;IACjG,IAAI,CAACsB,cAAc,EAAE;MACjBN,KAAK,CAAC,mBAAmB,CAAC;MAC1B;IACJ;IAEA,MAAMS,wBAAwB,GAAGrB,wBAAwB,CAACF,eAAe,CAAC;IAE1E,MAAMwB,WAAW,GAAG;MAChBhC,SAAS;MACTiC,UAAU,EAAErC,gBAAgB;MAC5BsC,UAAU,EAAE5B,YAAY;MACxBE,eAAe,EAAEuB;IACrB,CAAC;IAEDxC,KAAK,CAAC4C,IAAI,CAAC,+BAA+B,EAAEH,WAAW,CAAC,CACnDd,IAAI,CAACC,QAAQ,IAAI;MACdG,KAAK,CAAC,mCAAmCtB,SAAS,gBAAgBJ,gBAAgB,oBAAoBU,YAAY,wBAAwByB,wBAAwB,EAAE,CAAC;MACrK9B,YAAY,CAAC,EAAE,CAAC;MAChBE,gBAAgB,CAAC,EAAE,CAAC;MACpBE,cAAc,CAAC,EAAE,CAAC;MAClBN,YAAY,CAAC,EAAE,CAAC;MAChBF,mBAAmB,CAAC,EAAE,CAAC;MACvBU,eAAe,CAAC,EAAE,CAAC;MACnBE,kBAAkB,CAAC,EAAE,CAAC;IAC1B,CAAC,CAAC,CACDc,KAAK,CAACC,KAAK,IAAI;MACZ,IAAIA,KAAK,CAACL,QAAQ,EAAE;QAChBG,KAAK,CAAC,2BAA2BE,KAAK,CAACL,QAAQ,CAACC,IAAI,EAAE,CAAC;MAC3D,CAAC,MAAM;QACHE,KAAK,CAAC,2CAA2C,CAAC;MACtD;IACJ,CAAC,CAAC;EACV,CAAC;EAED,oBACI7B,OAAA;IAAA2C,QAAA,gBACI3C,OAAA;MAAA2C,QAAA,EAAI;IAAc;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACvB/C,OAAA;MAAKgD,SAAS,EAAC,SAAS;MAAAL,QAAA,gBACxB3C,OAAA;QAAA2C,QAAA,gBACI3C,OAAA;UAAOiD,OAAO,EAAC,WAAW;UAAAN,QAAA,EAAC;QAAW;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eAC9C/C,OAAA;UACIkD,IAAI,EAAC,MAAM;UACXC,EAAE,EAAC,WAAW;UACdC,KAAK,EAAE7C,SAAU;UACjB8C,QAAQ,EAAGC,CAAC,IAAK9C,YAAY,CAAC8C,CAAC,CAACC,MAAM,CAACH,KAAK;QAAE;UAAAR,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACjD,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACD,CAAC,eAEN/C,OAAA;QAAA2C,QAAA,gBACI3C,OAAA;UAAOiD,OAAO,EAAC,eAAe;UAAAN,QAAA,EAAC;QAAe;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eACtD/C,OAAA;UACIkD,IAAI,EAAC,gBAAgB;UACrBC,EAAE,EAAC,eAAe;UAClBC,KAAK,EAAE3C,aAAc;UACrB4C,QAAQ,EAAGC,CAAC,IAAK5C,gBAAgB,CAAC4C,CAAC,CAACC,MAAM,CAACH,KAAK;QAAE;UAAAR,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACrD,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACD,CAAC,eAEN/C,OAAA;QAAA2C,QAAA,gBACI3C,OAAA;UAAOiD,OAAO,EAAC,aAAa;UAAAN,QAAA,EAAC;QAAa;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eAClD/C,OAAA;UACIkD,IAAI,EAAC,gBAAgB;UACrBC,EAAE,EAAC,aAAa;UAChBC,KAAK,EAAEzC,WAAY;UACnB0C,QAAQ,EAAGC,CAAC,IAAK1C,cAAc,CAAC0C,CAAC,CAACC,MAAM,CAACH,KAAK;QAAE;UAAAR,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACnD,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACD,CAAC,eAEN/C,OAAA;QAAA2C,QAAA,gBACI3C,OAAA;UAAOiD,OAAO,EAAC,cAAc;UAAAN,QAAA,EAAC;QAAU;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eAChD/C,OAAA;UACIkD,IAAI,EAAC,MAAM;UACXC,EAAE,EAAC,cAAc;UACjBK,WAAW,EAAC,aAAa;UACzBJ,KAAK,EAAEvC,YAAa;UACpBwC,QAAQ,EAAGC,CAAC,IAAKxC,eAAe,CAACwC,CAAC,CAACC,MAAM,CAACH,KAAK;QAAE;UAAAR,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACpD,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACD,CAAC,eAEN/C,OAAA;QAAA2C,QAAA,gBACI3C,OAAA;UAAOiD,OAAO,EAAC,iBAAiB;UAAAN,QAAA,EAAC;QAAkB;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eAC3D/C,OAAA;UACIkD,IAAI,EAAC,gBAAgB;UACrBC,EAAE,EAAC,iBAAiB;UACpBC,KAAK,EAAErC,eAAgB;UACvBsC,QAAQ,EAAGC,CAAC,IAAKtC,kBAAkB,CAACsC,CAAC,CAACC,MAAM,CAACH,KAAK;QAAE;UAAAR,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACvD,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACD,CAAC,eAEN/C,OAAA;QAAQyD,OAAO,EAAErC,cAAe;QAAAuB,QAAA,EAAC;MAA0B;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,EAEnE1C,SAAS,CAACuB,MAAM,GAAG,CAAC,iBACjB5B,OAAA;QAAA2C,QAAA,gBACI3C,OAAA;UAAA2C,QAAA,EAAI;QAAoB;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAC7B/C,OAAA;UAAA2C,QAAA,EACKtC,SAAS,CAACqD,GAAG,CAACC,IAAI,iBACf3D,OAAA;YAAA2C,QAAA,eACI3C,OAAA;cACIyD,OAAO,EAAEA,CAAA,KAAMrD,mBAAmB,CAACuD,IAAI,CAACR,EAAE,CAAE;cAC5CH,SAAS,EAAE7C,gBAAgB,KAAKwD,IAAI,CAACR,EAAE,GAAG,eAAe,GAAG,EAAG;cAAAR,QAAA,GAE9DgB,IAAI,CAAClD,aAAa,EAAC,KAAG,EAACkD,IAAI,CAAChD,WAAW;YAAA;cAAAiC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACpC;UAAC,GANJY,IAAI,CAACR,EAAE;YAAAP,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAOZ,CACP;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACF,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACJ,CACR,eAED/C,OAAA;QAAQyD,OAAO,EAAEzB,aAAc;QAAAW,QAAA,EAAC;MAAQ;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChD,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEd,CAAC;AAAC7C,EAAA,CAlKID,OAAO;AAAA2D,EAAA,GAAP3D,OAAO;AAoKb,eAAeA,OAAO;AAAC,IAAA2D,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}